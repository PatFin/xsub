#!/usr/bin/env ruby

root = File.expand_path('../../', __FILE__)
$:.unshift File.expand_path('lib', root)

require 'any_scheduler'
require 'optparse'
require 'json'
require 'logger'

Version = AnyScheduler::VERSION

scheduler = nil
parameters = {}
logger = Logger.new(STDERR)
LOG_ROTATE_SIZE = 7

OptionParser.new { |parser|
  parser.on('-s', '--scheduler [TYPE]', "scheduler type") do |type|
    type = type.sub(/^=/,'').to_sym
    supported_types = AnyScheduler::SCHEDULER_TYPE.keys
    unless supported_types.include?(type)
      raise "#{type} is not found in supported types #{supported_types.inspect}"
    end
    scheduler = AnyScheduler.scheduler(type).new
  end

  parser.on('-t', '--show-template', 'show template') do |t|
    raise "scheduler type is not given" unless scheduler
    h = {parameters: scheduler.parameter_definitions, template: scheduler.template }
    $stdout.print JSON.pretty_generate(h)
    exit
  end

  parser.on('-p', '--parameters [PARAM]', 'parameters') do |param|
    parameters = JSON.load(param.sub(/^=/,'')) if param.size > 0
  end

  parser.on('-l', '--log [PARAM]', 'log file') do |log|
    logger = Logger.new(log.sub(/^=/, ''), LOG_ROTATE_SIZE) if log.size > 0
  end

}.parse!(ARGV)

raise "scheduler type is not given" unless scheduler
output = scheduler.submit(ARGV, parameters, logger)
$stdout.print JSON.pretty_generate(output)
