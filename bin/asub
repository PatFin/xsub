#!/usr/bin/env ruby

root = File.expand_path('../../', __FILE__)
$:.unshift File.expand_path('lib', root)

require 'any_scheduler'
require 'optparse'
require 'json'
require 'logger'

Version = AnyScheduler::VERSION
scheduler = AnyScheduler.load_scheduler
parameters = {}
logger = Logger.new(STDERR)
LOG_ROTATE_SIZE = 7
work_dir = '.'

OptionParser.new { |parser|
  parser.on('-t', '--show-template', 'show template') do |t|
    raise "scheduler type is not given" unless scheduler
    h = {parameters: scheduler.parameter_definitions, template: scheduler.template }
    $stdout.print JSON.pretty_generate(h)
    exit
  end

  parser.on('-p', '--parameters [PARAM]', 'parameters') do |param|
    parameters = JSON.load(param.sub(/^=/,'')) if param.size > 0
  end

  parser.on('-l', '--log [PARAM]', 'log file') do |log|
    logger = Logger.new(log.sub(/^=/, ''), LOG_ROTATE_SIZE) if log.size > 0
  end

  parser.on('-d', '--dir [WORKDIR]', 'work directory') do |dir|
    work_dir = dir.sub(/^=/, '') if dir.size > 0
  end

}.parse!(ARGV)

raise "scheduler type is not given" unless scheduler
output = scheduler.submit(ARGV, parameters, logger: logger, work_dir: work_dir)
$stdout.print JSON.pretty_generate(output)
